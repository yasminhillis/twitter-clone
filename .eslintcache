[{"/Users/yasminhillis/Desktop/twitter-clone/src/index.js":"1","/Users/yasminhillis/Desktop/twitter-clone/src/reportWebVitals.js":"2","/Users/yasminhillis/Desktop/twitter-clone/src/App.js":"3","/Users/yasminhillis/Desktop/twitter-clone/src/Sidebar.js":"4","/Users/yasminhillis/Desktop/twitter-clone/src/SidebarOption.js":"5","/Users/yasminhillis/Desktop/twitter-clone/src/Feed.js":"6","/Users/yasminhillis/Desktop/twitter-clone/src/Widgets.js":"7","/Users/yasminhillis/Desktop/twitter-clone/src/TweetBox.js":"8","/Users/yasminhillis/Desktop/twitter-clone/src/Post.js":"9","/Users/yasminhillis/Desktop/twitter-clone/src/firebase.js":"10"},{"size":500,"mtime":1607461596691,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1607461596693,"results":"13","hashOfConfig":"12"},{"size":265,"mtime":1607626366407,"results":"14","hashOfConfig":"12"},{"size":1421,"mtime":1607523574647,"results":"15","hashOfConfig":"12"},{"size":282,"mtime":1607519594800,"results":"16","hashOfConfig":"12"},{"size":1071,"mtime":1607641858226,"results":"17","hashOfConfig":"12"},{"size":1113,"mtime":1607617406753,"results":"18","hashOfConfig":"12"},{"size":1623,"mtime":1607640256264,"results":"19","hashOfConfig":"12"},{"size":1605,"mtime":1607641264084,"results":"20","hashOfConfig":"12"},{"size":514,"mtime":1607624631388,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"wfvw74",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/yasminhillis/Desktop/twitter-clone/src/index.js",[],["47","48"],"/Users/yasminhillis/Desktop/twitter-clone/src/reportWebVitals.js",[],"/Users/yasminhillis/Desktop/twitter-clone/src/App.js",[],"/Users/yasminhillis/Desktop/twitter-clone/src/Sidebar.js",[],"/Users/yasminhillis/Desktop/twitter-clone/src/SidebarOption.js",[],"/Users/yasminhillis/Desktop/twitter-clone/src/Feed.js",["49"],"import React, { useState, useEffect } from 'react';\nimport TweetBox from './TweetBox'; \nimport Post from './Post'\nimport './Feed.css';\nimport Image from './images/yasmin.jpeg'\nimport db from './firebase'; \nimport FlipMove from 'react-flip-move'\n\nconst Feed = () => {\n\n  const [ post, setPost ] = useState([])\n  useEffect(() => {\n    db.collection('posts').onSnapshot(snapshot => {\n      setPost(snapshot.docs.map(doc => doc.data())\n      )\n    })\n  }, [])\n\n  console.log(post, 'post');\n\n\n    return (\n      <div className='feed'>\n        <div className='feed__header'>\n          <h2>Home</h2> \n          </div>\n         <TweetBox />\n\n         <FlipMove>\n         {\n           post.map(post => (\n            <Post \n            key={post.text}\n            displayName = {post.displayName}\n            username = {post.username}\n            verified = {post.verified}\n            image= {post.image}\n            avatar= {post.avatar}\n            text= {post.text}\n           />\n           ))\n         }\n         </FlipMove>\n        </div>\n\n    );  \n};\n\nexport default Feed;\n","/Users/yasminhillis/Desktop/twitter-clone/src/Widgets.js",[],"/Users/yasminhillis/Desktop/twitter-clone/src/TweetBox.js",["50"],"import React, { useState } from 'react'; \nimport Image from './images/yasmin.jpeg'\n\nimport './TweetBox.css'; \nimport Post from './Post'\nimport db from './firebase'\n\nimport { Avatar, Button } from '@material-ui/core'\n\n\n \nconst TweetBox = () => {\n    const [ tweetMessage, setTweetMessage ] = useState(''); \n    const [ tweetImage, setTweetImage ] = useState(''); \n\n    console.log(tweetMessage, 'tweetMessage');\n    console.log(tweetImage, 'tweetImage');\n    const sendTweet = e => {\n        e.preventDefault(); \n        db.collection('posts').add({\n            displayName: 'Yasmin Hillis',\n            username : 'yasminhillis',\n            verified: true,\n            image: tweetImage,\n            avatar: 'https://avatars0.githubusercontent.com/u/30685524?s=460&u=fb45f5dc18c7fc8537141e118f0bedb2c5af4348&v=4',\n            text: tweetMessage\n        })\n        setTweetMessage(\"\");\n        setTweetImage(\"\")\n    }\n    return (\n        <div className=\"tweetBox\">\n            <form>\n                <div className=\"tweetBox__input\">\n                    <Avatar src={Image} />\n                    <input value={tweetMessage} onChange={(e) => setTweetMessage(e.target.value)} placeholder=\"What's happening\" type=\"text\"/> \n                </div>\n                <input value={tweetImage} onChange={e => setTweetImage(e.target.value)} className=\"tweetBox__imageInput\" placeholder=\"Optional: Enter Image URL\" type=\"text\"/>\n                <Button type=\"submit\" onClick={sendTweet} variant=\"outlined\" className=\"tweetBox__tweetButton\">Tweet</Button>\n            </form>\n        </div>\n        \n    )\n}\n\nexport default TweetBox;","/Users/yasminhillis/Desktop/twitter-clone/src/Post.js",["51","52"],"import React, { forwardRef } from 'react';\n\nimport './Post.css';\nimport Image from './images/yasmin.jpeg';\nimport { Avatar } from '@material-ui/core';\n\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport PublishIcon from '@material-ui/icons/Publish';\n\nconst Post = forwardRef(\n  ({ displayName, username, verified, text, image, avatar }, ref) => {\n    return (\n      <div className='post' ref={ref}>\n        <div className='post__avatar'>\n          <Avatar src={avatar} />\n        </div>\n        <div className='post__body'>\n          <div className='post__header'>\n            <div className='post__headerText'>\n              <h3>\n                {displayName}{\" \"}\n                <span className='post__headerSpecial'>\n                  {verified && <VerifiedUserIcon className='post__badge' />}@\n                  {username}\n                </span>\n              </h3>\n            </div>\n            <div className='post_headerDescription'>\n              <p className=\"post__text\">{text}</p>\n            </div>\n            \n          </div>\n          <img src={image} />\n          <div className='post__footer'>\n            <ChatBubbleOutlineIcon fontSize='small' />\n            <RepeatIcon fontSize='small' />\n            <FavoriteBorderIcon fontSize='small' />\n            <PublishIcon fontSize='small' />\n          </div>\n        </div>\n      </div>\n    );\n  }\n)\n\nexport default Post;\n",["53","54"],"/Users/yasminhillis/Desktop/twitter-clone/src/firebase.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":13},{"ruleId":"59","severity":1,"message":"63","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":12},{"ruleId":"59","severity":1,"message":"60","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":13},{"ruleId":"64","severity":1,"message":"65","line":36,"column":11,"nodeType":"66","endLine":36,"endColumn":30},{"ruleId":"55","replacedBy":"67"},{"ruleId":"57","replacedBy":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'Post' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["69"],["70"],"no-global-assign","no-unsafe-negation"]